name: Python Application CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

jobs:
  # 1. Testing and building step
  test-and-build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for pre-commit checks

    - name: Load full config
      id: config
      uses: pietrobolcato/action-read-yaml@1.1.0
      with:
        config: './config.yaml'

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.11'

    - name: Run pre-commit hooks
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit
        pre-commit install
        pre-commit run --all-files

    - name: Login to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ steps.config.outputs['azure_container_registry'] }}
        username: ${{ secrets.SERVICE_PRINCIPAL_CLIENT_ID }}
        password: ${{ secrets.SERVICE_PRINCIPAL_CLIENT_SECRET_ID }}

    - name: Build Docker image
      run: |
        docker build -t ${{ steps.config.outputs['azure_container_registry'] }}/${{ github.repository }}:${{ github.sha }} .

    - name: Push Docker image to ACR
      run: |
        docker push ${{ steps.config.outputs['azure_container_registry'] }}/${{ github.repository }}:${{ github.sha }}

  # 2. Deployment step
  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Load full config
      id: config
      uses: pietrobolcato/action-read-yaml@1.1.0
      with:
        config: './config.yaml'

    - name: Azure Login
      uses: azure/login@v1.4.0
      with:
        client-id: ${{ secrets.SERVICE_PRINCIPAL_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Ensure Log Analytics Workspace
      run: |
        workspace_name="${{ steps.config.outputs['azure_log_analytics_workspace_name'] }}"
        resource_group="${{ steps.config.outputs['azure_resource_group'] }}"

        exists=$(az monitor log-analytics workspace list \
          --resource-group "$resource_group" \
          --query "[?name=='$workspace_name']" -o tsv)

        if [[ -z "$exists" ]]; then
          echo "Creating Log Analytics Workspace: $workspace_name"
          az monitor log-analytics workspace create \
            --resource-group "$resource_group" \
            --workspace-name "$workspace_name" \
            --location 'westus'
        else
          echo "Log Analytics Workspace $workspace_name already exists."
        fi

    - name: Deploy to Azure Container Instances
      uses: azure/aci-deploy@v1
      with:
        resource-group: ${{ steps.config.outputs['azure_resource_group'] }}
        dns-name-label: ${{ steps.config.outputs['azure_container_name'] }}
        image: ${{ steps.config.outputs['azure_container_registry'] }}/${{ github.repository }}:${{ github.sha }}
        registry-username: ${{ secrets.SERVICE_PRINCIPAL_CLIENT_ID }}
        registry-password: ${{ secrets.SERVICE_PRINCIPAL_CLIENT_SECRET_ID }}
        name: ${{ steps.config.outputs['azure_container_name'] }}
        location: 'westus'
        memory: 1G
        environment-variables: |
          LOG_ANALYTICS_WORKSPACE_ID=${{ secrets.LOG_ANALYTICS_WORKSPACE_ID }}
          LOG_ANALYTICS_WORKSPACE_KEY=${{ secrets.LOG_ANALYTICS_WORKSPACE_KEY }}
        log-analytics-workspace: ${{ steps.config.outputs['azure_log_analytics_workspace_name'] }}

    - name: Validate Deployment
      run: |
        state=$(az container show \
          --name ${{ steps.config.outputs['azure_container_name'] }} \
          --resource-group ${{ steps.config.outputs['azure_resource_group'] }} \
          --query 'instanceView.state' -o tsv)

        if [[ "$state" != "Running" ]]; then
          echo "Error: Container group is not in the 'Running' state."
          exit 1
        fi

        logs=$(az container logs \
          --name ${{ steps.config.outputs['azure_container_name'] }} \
          --resource-group ${{ steps.config.outputs['azure_resource_group'] }})

        echo "Container logs:"
        echo "$logs"

        if echo "$logs" | grep -q "error"; then
          echo "Error: Logs contain error messages."
          exit 1
        fi
