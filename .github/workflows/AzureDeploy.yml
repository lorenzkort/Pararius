name: Python Application CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for pre-commit checks

    # Load the entire config file
    - name: Load full config
      id: config
      uses: pietrobolcato/action-read-yaml@1.1.0
      with:
        config: './config.yaml'

    - name: Show loaded configurations
      run: |
        # Accessing nested values using the full config
        echo "Registry URL: ${{ steps.config.outputs['azure_container_registry'] }}"
        echo "App Resource Group: ${{ steps.config.outputs.data['azure_resource_group'] }}"
        echo "ACR Container Name: ${{ steps.config.outputs.data['azure_container_name'] }}"

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.11'

    - name: Install pre-commit
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit
        pre-commit install

    - name: Run pre-commit hooks
      run: pre-commit run --all-files

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ steps.config.outputs['azure_container_registry'] }}
        username: ${{ secrets.SERVICE_PRINCIPAL_CLIENT_ID }}
        password: ${{ secrets.SERVICE_PRINCIPAL_CLIENT_SECRET_ID }}

    - name: Install Docker Compose
      run: |
        sudo mkdir -p /usr/local/lib/docker/cli-plugins
        sudo curl -SL https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose
        sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose

    - name: Build with docker compose
      run: |
        docker compose build

    - name: Run tests in container
      run: |
        docker compose run --rm app pytest tests/ --cov=./ --cov-report=xml

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

    - name: Tag and push Docker image
      run: |
        # Get the image name from docker-compose
        IMAGE_NAME=$(docker compose config | grep 'image:' | awk '{print $2}')

        # Tag with Azure registry and commit SHA
        docker tag $IMAGE_NAME ${{ steps.config.outputs['azure_container_registry'] }}/${{ github.repository }}:${{ github.sha }}
        docker tag $IMAGE_NAME ${{ steps.config.outputs['azure_container_registry'] }}/${{ github.repository }}:latest

        # Push both tags
        docker push ${{ steps.config.outputs['azure_container_registry'] }}:${{ github.sha }}
        docker push ${{ steps.config.outputs['azure_container_registry'] }}/${{ github.repository }}:latest

  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only deploy on main branch

    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Container Instances
      uses: azure/aci-deploy@v1
      with:
        resource-group: ${{ steps.config.outputs['azure_resource_group'] }}
        dns-name-label: ${{ steps.config.outputs['azure_container_name'] }}
        image: ${{ steps.config.outputs['azure_container_registry'] }}:${{ github.sha }}
        registry-username: ${{ secrets.AZURE_CLIENT_ID }}
        registry-password: ${{ secrets.AZURE_CLIENT_SECRET }}
        name: ${{ steps.config.outputs['azure_container_name'] }}
        location: 'eastus'
