name: Python Application CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

jobs:
  # 1. Testing and building step
  test-and-build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for pre-commit checks

    # Load the entire config file
    - name: Load full config
      id: config
      uses: pietrobolcato/action-read-yaml@1.1.0
      with:
        config: './config.yaml'

    - name: Show loaded configurations
      run: |
        # Accessing nested values using the full config
        echo "Registry URL: ${{ steps.config.outputs['azure_container_registry'] }}"
        echo "App Resource Group: ${{ steps.config.outputs.data['azure_resource_group'] }}"
        echo "ACR Container Name: ${{ steps.config.outputs.data['azure_container_name'] }}"

    - name: Upload config.yaml as artifact
      uses: actions/upload-artifact@v3
      with:
        name: config
        path: config.yaml

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.11'

    - name: Install pre-commit
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit
        pre-commit install

    - name: Run pre-commit hooks
      run: pre-commit run --all-files

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ steps.config.outputs['azure_container_registry'] }}
        username: ${{ secrets.SERVICE_PRINCIPAL_CLIENT_ID }}
        password: ${{ secrets.SERVICE_PRINCIPAL_CLIENT_SECRET_ID }}

    - name: Install Docker Compose
      run: |
        sudo mkdir -p /usr/local/lib/docker/cli-plugins
        sudo curl -SL https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose
        sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose

    - name: Build with docker compose
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        AZURE_TABLES_CONNECTION_STRING: ${{ secrets.AZURE_TABLES_CONNECTION_STRING }}
      run: |
        docker compose build

    - name: Run tests in container
      run: |
        docker compose run --rm app pytest tests/ --cov=./ --cov-report=xml

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

    - name: Tag and push Docker image
      run: |
        # Get the image name from docker-compose
        IMAGE_NAME=$(docker compose config | grep 'image:' | awk '{print $2}')

        # Convert the GitHub repository name to lowercase
        REPO_NAME_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')

        # Tag with Azure registry and commit SHA
        docker tag $IMAGE_NAME ${{ steps.config.outputs['azure_container_registry'] }}/${REPO_NAME_LOWER}:${{ github.sha }}
        docker tag $IMAGE_NAME ${{ steps.config.outputs['azure_container_registry'] }}/${REPO_NAME_LOWER}:latest

        # Push both tags
        docker push ${{ steps.config.outputs['azure_container_registry'] }}/${REPO_NAME_LOWER}:${{ github.sha }}
        docker push ${{ steps.config.outputs['azure_container_registry'] }}/${REPO_NAME_LOWER}:latest

  # 2. Deployment step
  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only deploy on main branch

    steps:
    # Download the config.yaml artifact from the previous job
    - name: Download config.yaml
      uses: actions/download-artifact@v3
      with:
        name: config

    # Load the entire config file
    - name: Load full config
      id: config
      uses: pietrobolcato/action-read-yaml@1.1.0
      with:
        config: './config.yaml'

    - name: Azure Login
      uses: azure/login@v1.4.0
      with:
        client-id: ${{ secrets.SERVICE_PRINCIPAL_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: false

    - name: Convert repository name to lowercase
      id: repo-name
      run: echo "repo_name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    # Ensure Log Analytics Workspace exists
    - name: Ensure Log Analytics Workspace
      run: |
        workspace_name="${{ steps.config.outputs['log_analytics_workspace_name'] }}"
        resource_group="${{ steps.config.outputs['azure_resource_group'] }}"

        # Check if workspace exists
        exists=$(az monitor log-analytics workspace list \
          --resource-group "$resource_group" \
          --query "[?name=='$workspace_name']" -o tsv)

        if [[ -z "$exists" ]]; then
          echo "Creating Log Analytics Workspace: $workspace_name"
          az monitor log-analytics workspace create \
            --resource-group "$resource_group" \
            --workspace-name "$workspace_name" \
            --location 'westus'
        else
          echo "Log Analytics Workspace $workspace_name already exists."
        fi

    - name: Deploy to Azure Container Instances
      uses: azure/aci-deploy@v1
      with:
        resource-group: ParariusScraper
        dns-name-label: ${{ steps.config.outputs['azure_container_name'] }}
        image: ${{ steps.config.outputs['azure_container_registry'] }}/${{ env.repo_name }}:${{ github.sha }}
        registry-username: parariusregistry
        registry-password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PW }}
        name: ${{ steps.config.outputs['azure_container_name'] }}
        location: 'westus'
        memory: 1G
        environment-variables: |
          LOG_ANALYTICS_WORKSPACE_ID=${{ secrets.LOG_ANALYTICS_WORKSPACE_ID }}
        log-analytics-workspace: ${{ steps.config.outputs['log_analytics_workspace_name'] }}
        log-analytics-workspace-key: ${{ secrets.LOG_ANALYTICS_WORKSPACE_KEY }}

    - name: Validate Deployment
      run: |
        # Validate the state of the container group
        state=$(az container show \
          --name ${{ steps.config.outputs['azure_container_name'] }} \
          --resource-group ${{ steps.config.outputs['azure_resource_group'] }} \
          --query 'instanceView.state' -o tsv)

        if [[ "$state" != "Running" ]]; then
          echo "Error: Container group is not in the 'Running' state. Current state: $state"
          exit 1
        fi

        echo "Container group is in the 'Running' state."

        # Fetch and validate logs from the container
        logs=$(az container logs \
          --name ${{ steps.config.outputs['azure_container_name'] }} \
          --resource-group ${{ steps.config.outputs['azure_resource_group'] }})

        echo "Container logs:"
        echo "$logs"

        if echo "$logs" | grep -q "error"; then
          echo "Error: Logs contain error messages."
          exit 1
        fi

        echo "Deployment validated successfully. No errors found in logs."

        # Validate Log Analytics Workspace connection
        linked_workspace=$(az container show \
          --name ${{ steps.config.outputs['azure_container_name'] }} \
          --resource-group ${{ steps.config.outputs['azure_resource_group'] }} \
          --query 'diagnostics.logAnalytics.workspaceId' -o tsv)

        if [[ -z "$linked_workspace" ]]; then
          echo "Error: No Log Analytics Workspace connected to the container instance."
          exit 1
        fi

        echo "Log Analytics Workspace connected successfully."
